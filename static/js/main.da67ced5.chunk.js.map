{"version":3,"sources":["components/buttons_bar/components/letter_button/letter_button.jsx","components/buttons_bar/buttons_bar.jsx","components/text_modal/text_modal.jsx","pairs/engge.js","App.jsx","serviceWorker.js","index.jsx"],"names":["BUTTON_STYLES","MISSING","PUSHED","NORMAL","LetterButton","_ref","style","letter","letterKey","disabled","onSelectLetter","react_default","a","createElement","Button","variant","onClick","defaultProps","console","log","ButtonsBar","getStyle","_this$props","_this","props","pushed","pairs","Object","values","includes","indexOf","_this2","this","_this$props2","alphabet","valuesOfPairs","ButtonToolbar","className","map","i","key","keys","find","letter_button","PureComponent","TextModal","state","text","onSubmit","e","preventDefault","onUploadText","onChangeText","value","currentTarget","setState","showModal","onCloseModal","Fragment","Modal","show","onHide","size","Header","closeButton","Title","Body","InputGroup","FormControl","as","rows","aria-label","onChange","Footer","type","Component","b","g","d","v","z","t","l","m","n","o","zh","r","s","u","p","k","gh","q","sh","ch","c","dz","x","j","h","App","objectSpread","defineProperty","_this$state$pushed","other","objectWithoutProperties","_toPropertyKey","onOpenModal","_this$state","newText","index","search_term","RegExp","replace","text_modal","Navbar","bg","fixed","Brand","href","target","buttons_bar_ButtonsBar","Form","inline","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da67ced5.chunk.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { Button } from \"react-bootstrap\"\n\nexport const BUTTON_STYLES = {\n  MISSING: \"danger\",\n  PUSHED: \"info\",\n  NORMAL: \"light\"\n}\n\nconst LetterButton = ({ style, letter, letterKey, disabled, onSelectLetter }) => (\n  <Button variant={style} disabled={disabled} onClick={() => onSelectLetter(letterKey, letter)}>\n    {letter}\n  </Button>\n)\n\nLetterButton.propTypes = {\n  style: PropTypes.oneOf(Object.values(BUTTON_STYLES)),\n  letter: PropTypes.string.isRequired,\n  letterKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  disabled: PropTypes.bool.isRequired,\n  onSelectLetter: PropTypes.func\n}\nLetterButton.defaultProps = {\n  style: BUTTON_STYLES.NORMAL,\n  onSelectLetter: () => console.log(\"hi\")\n}\nexport default LetterButton\n","import React, { PureComponent } from \"react\"\nimport PropTypes from \"prop-types\"\nimport { ButtonToolbar } from \"react-bootstrap\"\n\nimport Button from \"./components/letter_button\"\nimport { BUTTON_STYLES } from \"./components/letter_button/letter_button\"\n\nexport default class ButtonsBar extends PureComponent {\n  static propTypes = {\n    alphabet: PropTypes.arrayOf(PropTypes.string).isRequired,\n    pushed: PropTypes.shape({}),\n    pairs: PropTypes.shape({}),\n    onSelectLetter: PropTypes.func\n  }\n  static defaultProps = {\n    alphabet: [],\n    pushed: {},\n    pairs: {},\n    onSelectLetter: () => {}\n  }\n\n  getStyle = letter => {\n    const { pushed, pairs } = this.props\n\n    const valuesOfPairs = Object.values(pairs)\n\n    if (!valuesOfPairs.includes(letter)) return BUTTON_STYLES.MISSING\n\n    if (Object.values(pushed).indexOf(letter) > -1) return BUTTON_STYLES.PUSHED\n\n    return BUTTON_STYLES.NORMAL\n  }\n\n  render() {\n    const { alphabet, pairs, onSelectLetter } = this.props\n    const valuesOfPairs = Object.values(pairs)\n    return (\n      <ButtonToolbar className=\"d-flex flex-row justify-content-center align-items-center\">\n        {alphabet.map((letter, i) => {\n          const key = Object.keys(pairs).find(key => pairs[key] === letter)\n          return (\n            <div key={letter}>\n              <Button\n                style={this.getStyle(letter)}\n                disabled={!valuesOfPairs.includes(letter)}\n                onSelectLetter={onSelectLetter}\n                letter={letter}\n                letterKey={key || i}\n              />\n            </div>\n          )\n        })}\n      </ButtonToolbar>\n    )\n  }\n}\n","import React, { Component } from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Button, Modal, InputGroup, FormControl } from \"react-bootstrap\"\n\nclass TextModal extends Component {\n  static propTypes = {\n    showModal: PropTypes.bool,\n    onUploadText: PropTypes.func,\n    onCloseModal: PropTypes.func\n  }\n  static defaultProps = {\n    showModal: false,\n    onUploadText: () => {},\n    onCloseModal: () => {}\n  }\n\n  state = {\n    text: \"\"\n  }\n\n  onSubmit = e => {\n    e.preventDefault()\n    const { onUploadText } = this.props\n    const { text } = this.state\n    onUploadText(text)\n  }\n\n  onChangeText = e => {\n    const { value } = e.currentTarget\n    this.setState(() => ({ text: value }))\n  }\n\n  render() {\n    const { showModal, onCloseModal } = this.props\n    return (\n      <>\n        <Button variant=\"primary\" onClick={onCloseModal}>\n          Launch demo modal\n        </Button>\n\n        <Modal show={showModal} onHide={onCloseModal} size=\"lg\">\n          <Modal.Header closeButton>\n            <Modal.Title>Here you can upload your own text and start to learn</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <InputGroup>\n              <FormControl\n                as=\"textarea\"\n                rows=\"20\"\n                aria-label=\"With textarea\"\n                onChange={this.onChangeText}\n              />\n            </InputGroup>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={onCloseModal}>\n              Close\n            </Button>\n            <Button variant=\"primary\" type=\"submit\" onClick={this.onSubmit}>\n              Upload\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    )\n  }\n}\nexport default TextModal\n","// prettier-ignore\nconst pairs = {\n  \"a\": \"ა\",\n  \"b\": \"ბ\",\n  \"g\": \"გ\",\n  \"d\": \"დ\",\n  \"e\": \"ე\",\n  \"v\": \"ვ\",\n  \"z\": \"ზ\",\n  \"t\": \"თ\",\n  \"i\": \"ი\",\n  // \"k'\": \"კ\",\n  \"l\": \"ლ\",\n  \"m\": \"მ\",\n  \"n\": \"ნ\",\n  \"o\": \"ო\",\n  // \"p'\": \"პ\",\n  \"zh\": \"ჟ\",\n  \"r\": \"რ\",\n  \"s\": \"ს\",\n  // \"t'\": \"ტ\",\n  \"u\": \"უ\",\n  \"p\": \"ფ\",\n  \"k\": \"ქ\",\n  \"gh\": \"ღ\",\n  \"q\": \"ყ\", //q'\n  \"sh\": \"შ\",\n  \"ch\": \"ჩ\",\n  \"c\": \"ც\",\n  \"dz\": \"ძ\",\n  // \"c'\": \"წ\",\n  // \"ch'\": \"ჭ\",\n  \"x\": \"ხ\",\n  \"j\": \"ჯ\",\n  \"h\": \"ჰ\",\n}\n\nexport const missedPairs = [\"კ\", \"პ\", \"ტ\", \"წ\", \"ჭ\"]\nexport const alphabet = [\n  \"ა\",\n  \"ბ\",\n  \"გ\",\n  \"დ\",\n  \"ე\",\n  \"ვ\",\n  \"ზ\",\n  \"თ\",\n  \"ი\",\n  \"კ\",\n  \"ლ\",\n  \"მ\",\n  \"ნ\",\n  \"ო\",\n  \"პ\",\n  \"ჟ\",\n  \"რ\",\n  \"ს\",\n  \"ტ\",\n  \"უ\",\n  \"ფ\",\n  \"ქ\",\n  \"ღ\",\n  \"ყ\",\n  \"შ\",\n  \"ჩ\",\n  \"ც\",\n  \"ძ\",\n  \"წ\",\n  \"ჭ\",\n  \"ხ\",\n  \"ჯ\",\n  \"ჰ\"\n]\nexport default pairs\n","import React, { Component } from \"react\"\nimport { Navbar, Form, Button } from \"react-bootstrap\"\n\nimport ButtonsBar from \"./components/buttons_bar\"\nimport TextModal from \"./components/text_modal\"\nimport pairs, { alphabet } from \"./pairs/engge\"\n\nimport \"./App.css\"\n\n// const text = \"There are many ways that reading helps you to learn English.\"\n// \"There are many ways that reading helps you to learn English, but reading itself is an important life skill. In everyday life we use reading to get information about the world around us. There are signs on the street. Can you park your car here? Which days can you park? How long? There are letters from school or utility companies that come in the mail. There are also bus schedules, bills, medicine labels, ads, health care pamphlets, and technical manuals for our electronic devices. When you are new to a country, this is the first kind of reading you need. USA Learns will help prepare you with the Life Skills reading activities. health care pamphlets, and technical manuals for our electronic devices. When you are new to a country, this is the first kind of reading you need. USA Learns will help prepare you with the Life Skills reading activities. health care pamphlets, and technical manuals for our electronic devices. When you are new to a country, this is the first kind of reading you need. USA Learns will help prepare you with the Life Skills reading activities. health care pamphlets, and technical manuals for our electronic devices. When you are new to a country, this is the first kind of reading you need. USA Learns will help prepare you with the Life Skills reading activities. health care pamphlets, and technical manuals for our electronic devices. When you are new to a country, this is the first kind of reading you need.\"\n\nclass App extends Component {\n  state = {\n    showModal: false,\n    pushed: {},\n    text: \"There are many ways that reading helps you to learn foreign language.\"\n  }\n\n  // Buttons options\n  onSelectLetter = (key, letter) => {\n    const { pushed } = this.state\n    if (Object.values(pushed).indexOf(letter) < 0) {\n      this.setState(state => ({\n        pushed: { ...state.pushed, ...{ [key]: letter } }\n      }))\n    } else {\n      const { [key]: letter, ...other } = this.state.pushed\n\n      this.setState(() => ({ pushed: other }))\n    }\n  }\n  // Buttons options END\n\n  // Upload text modal\n  onUploadText = text => this.setState(() => ({ text, showModal: false }))\n\n  onCloseModal = () => this.setState(() => ({ showModal: false }))\n\n  onOpenModal = () => this.setState(() => ({ showModal: true }))\n  // Upload text modal END\n\n  render() {\n    const { pushed, text, showModal } = this.state\n\n    let newText = text\n    Object.keys(pushed).map((key, index) => {\n      var search_term = new RegExp(key, \"gi\")\n      return (newText = newText.replace(search_term, pushed[key]))\n    })\n\n    return (\n      <>\n        <TextModal\n          showModal={showModal}\n          onUploadText={this.onUploadText}\n          onCloseModal={this.onCloseModal}\n        />\n        <Navbar bg=\"dark\" fixed={\"top\"}>\n          <Navbar.Brand href=\"https://en.wikibooks.org/wiki/Georgian/Alphabet\" target=\"_blank\">\n            Georgian Alphabet\n          </Navbar.Brand>\n\n          <ButtonsBar\n            alphabet={alphabet}\n            pushed={pushed}\n            pairs={pairs}\n            onSelectLetter={this.onSelectLetter}\n          />\n\n          <Form inline>\n            <Button variant=\"outline-success\" onClick={this.onOpenModal}>\n              Upload Text\n            </Button>\n          </Form>\n        </Navbar>\n\n        <div className=\"App-body\">\n          <p>{newText}</p>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}